// 2839. 설탕 배달 -> 실버 4

#include <iostream>
#include <algorithm>

using namespace std;

int main() {

    // DP를 연습하기 위함임
    // 그렇기에 DP를 이용하여 문제를 해결할 예정

    // 정확히 N 킬로그램 배달해야함, 봉투의 종류는 3킬로그램과 5킬로그램 2가지가 존재
    // 최대한 적은 봉지

    int n;
    cin >> n;

    // 점화식을 세우기, 더 적은 거기 때문에 5로 먼저 들고가고 남은 것이 3의 배수가 되면 됨 -> 이러한 방식은 그리디방식일텐데
    // Bottom-Up 방식을 사용, 3과 5를 나눠서 가져감. 초기화를 할 때 3과 5는 초기값이니 1을 설정, 1 2 4 는 큰값을 넣어서, 개수 카운트 안되게함
    // 최소값이니 이미 저장된 값들을 이용하여 개수를 하나씩 늘려가면 된다. 그러다보면 5와 3만 뺴서 작은 값들의 개수를 늘려가다보면 그것이 5와 3의 최소 개수가 될것
    // 하지만 지정한 큰 값보다 큰 값이 나오게 되면 그것은 3과 5만 가져간 것이 아니기 때문에 -1을 반환하도록 함

    // 초기화, 나눠떨어져야하는 3과 5는 하나씩 배정, 나머진 큰값
    int sugar[5001] = {0,};
    sugar[1] = sugar[2] = sugar[4] = 5555;
    sugar[3] = sugar[5] = 1;

    for (int i = 6; i <= n; i++) {
        sugar[i] = min(sugar[i - 3], sugar[i - 5]) + 1; // 3 과 5로만 이루어진 수에 도달한다면 작은값이 나올 것, 그렇지 않으면 큰값이 나올것
    }

    if (sugar[n] == 0 ||sugar[n] >= 5555) {
        cout << -1 << endl;
    }
    else {
        cout << sugar[n] << endl;
    }

    return 0;
}